package sheetfunctionality;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.json.JSONArray;
import org.json.JSONObject;

public class email {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/my_project";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "Jothi@2002";
    private static final String OAUTH_TOKEN = "1000.c9cf6b7ccea78b1a79958b5801e5ce33.f1b32374440e068099ed6e84a8440ea6";
    private static final String RESOURCE_ID = "5725mf7ae0b0d4df34666aa919b5c3dff1864";
    private static final String SHEET_URL = "https://sheet.zoho.in/api/v2/" + RESOURCE_ID;

    public static void main(String[] args) {
        try {
            
            JSONArray jsonArray = fetchDataAndCalculatePercentage();
            postDataToSheet(jsonArray);
            Thread.sleep(10000);

            JSONArray updatedData = fetchUpdatedData();
            Thread.sleep(100);
            String worksheetName = "Sheet1";
            String insertColumnAfter = "LeaveDays"; // Column after which new columns will be inserted
            String[] columnNames = {"LeaveType"};

            insertColumns(worksheetName, insertColumnAfter, columnNames);
            updateLeaveType();
            applyConditionalFormatting(updatedData);
            setColumnWidths();
            

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static JSONArray fetchDataAndCalculatePercentage() throws SQLException {
        JSONArray jsonArray = new JSONArray();

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement()) {

            String query = "SELECT EmployeeID, EmployeeName, EmployeeEmailID, WorkingDays, LeaveDays FROM Employee";
            ResultSet rs = stmt.executeQuery(query);

            while (rs.next()) {
                int employeeId = rs.getInt("EmployeeID");
                String employeeName = rs.getString("EmployeeName");
                String employeeEmailID = rs.getString("EmployeeEmailID");
                int workingDays = rs.getInt("WorkingDays");
                int leaveDays = rs.getInt("LeaveDays");

                JSONObject jsonObject = new JSONObject();
                jsonObject.put("EmployeeID", employeeId);
                jsonObject.put("EmployeeName", employeeName);
                jsonObject.put("EmployeeEmailID", employeeEmailID);
                jsonObject.put("WorkingDays", workingDays);
                jsonObject.put("LeaveDays", leaveDays);

                jsonArray.put(jsonObject);

                System.out.println("JSON Object: " + jsonObject.toString());
            }
        }

        return jsonArray;
    }
//    private static JSONArray prepareUpdateData(JSONArray updatedData) {
//        JSONArray updateArray = new JSONArray();
//        
//        for (int i = 0; i < updatedData.length(); i++) {
//            JSONObject record = updatedData.getJSONObject(i);
//            
//            JSONObject updateRecord = new JSONObject();
////            updateRecord.put("row_id", record.getString("EmployeeID")); // Assume row_id is available in record
//            
//            JSONObject columns = new JSONObject();
//            columns.put("CheckIn", "9:00 am"); // Example value
//            columns.put("CheckOut", "4:00 pm"); 
//            columns.put("CheckIn", "9:10 am"); // Example value
//            columns.put("CheckOut", "4:05 pm"); 
//            columns.put("CheckIn", "9:03 am"); // Example value
//            columns.put("CheckOut", "4:20 pm"); // Example value
//            
//            updateRecord.put("columns", columns);
//            updateArray.put(updateRecord);
//        }
//        
//        return updateArray;
//    }

    private static void updateLeaveType() throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        // Prepare the JSON array to set content for multiple cells
        JSONArray updates = new JSONArray();
        
        // Example updates - these should be the actual rows you want to update
        updates.put(new JSONObject().put("worksheet_id", "0#")
                                    .put("content", "Sick Leave")
                                    .put("row", 2) 
                                    .put("column", 6));

        updates.put(new JSONObject().put("worksheet_id", "0#")
                                    .put("content", "Casual Leave")
                                    .put("row", 3) 
                                    .put("column", 6)); 

        updates.put(new JSONObject().put("worksheet_id", "0#")
                                    .put("content", "Sick Leave")
                                    .put("row", 4) 
                                    .put("column", 6)); 

   
        String postData = "method=cells.content.set&data=" + URLEncoder.encode(updates.toString(), StandardCharsets.UTF_8);

        // Create and send the request
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(SHEET_URL))
                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(postData))
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());


        System.out.println("Update Response Code :: " + response.statusCode());
        System.out.println("Update Response Body: " + response.body());

        if (response.statusCode() == 200) {
            System.out.println("Successfully updated LeaveType column.");
        } else {
            System.out.println("Updating LeaveType column failed.");
        }
    }

    private static void postDataToSheet(JSONArray jsonArray) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        String postData = buildPostData(jsonArray);
        HttpRequest addRecordsRequest = HttpRequest.newBuilder()
                .uri(new URI(SHEET_URL))
                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(postData))
                .build();

        HttpResponse<String> addRecordsResponse = client.send(addRecordsRequest, HttpResponse.BodyHandlers.ofString());
        System.out.println("Add Records Response Code :: " + addRecordsResponse.statusCode());
        System.out.println("Add Records Response Body: " + addRecordsResponse.body());

        if (addRecordsResponse.statusCode() != 200) {
            throw new Exception("Adding records failed.");
        }

        String postFormulaData = buildPostFormulaData();
        HttpRequest applyFormulaRequest = HttpRequest.newBuilder()
                .uri(new URI(SHEET_URL))
                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(postFormulaData))
                .build();

        HttpResponse<String> applyFormulaResponse = client.send(applyFormulaRequest, HttpResponse.BodyHandlers.ofString());
        System.out.println("Apply Formula Response Code :: " + applyFormulaResponse.statusCode());
        System.out.println("Apply Formula Response Body: " + applyFormulaResponse.body());

        if (applyFormulaResponse.statusCode() != 200) {
            throw new Exception("Applying formula failed.");
        }
    }

    private static JSONArray fetchUpdatedData() throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        String requestBody = "method=worksheet.records.fetch&worksheet_name=Sheet1";

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(SHEET_URL))
                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        System.out.println("Fetch Data Response Code :: " + response.statusCode());
        System.out.println("Fetch Data Response Body: " + response.body());

        if (response.statusCode() == 200) {
            JSONObject jsonResponse = new JSONObject(response.body());
            return jsonResponse.getJSONArray("records");
        } else {
            throw new Exception("Failed to fetch updated data: " + response.body());
        }
    }
    private static void insertColumns(String worksheetName, String insertColumnAfter, String[] columnNames) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        // Construct the JSON object for column insertion
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("method", "records.columns.insert");
        jsonObject.put("worksheet_name", worksheetName);
        jsonObject.put("insert_column_after", insertColumnAfter);
        jsonObject.put("column_names", new JSONArray(columnNames));

       
        String requestData = "method=" + URLEncoder.encode(jsonObject.getString("method"), StandardCharsets.UTF_8)
                + "&worksheet_name=" + URLEncoder.encode(jsonObject.getString("worksheet_name"), StandardCharsets.UTF_8)
                + "&insert_column_after=" + URLEncoder.encode(jsonObject.getString("insert_column_after"), StandardCharsets.UTF_8)
                + "&column_names=" + URLEncoder.encode(jsonObject.getJSONArray("column_names").toString(), StandardCharsets.UTF_8);

        System.out.println("Insert Columns Data: " + requestData);

        HttpRequest insertColumnsRequest = HttpRequest.newBuilder()
                .uri(new URI(SHEET_URL))
                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(requestData))
                .build();

        HttpResponse<String> insertColumnsResponse = client.send(insertColumnsRequest, HttpResponse.BodyHandlers.ofString());

        System.out.println("Insert Columns Response Code :: " + insertColumnsResponse.statusCode());
        System.out.println("Insert Columns Response Body: " + insertColumnsResponse.body());

        if (insertColumnsResponse.statusCode() == 200) {
            System.out.println("Successfully inserted columns.");
        } else {
            System.out.println("Inserting columns failed.");
        }
    }


    private static void applyConditionalFormatting(JSONArray records) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        JSONArray formatJsonArray = new JSONArray();

      
        for (int i = 0; i < records.length(); i++) {
            JSONObject record = records.getJSONObject(i);
            double percentage = record.getDouble("Percentage"); 
            int rowIndex = i + 2; 
            
            
            if (percentage < 90) {
                JSONObject formatRule = new JSONObject();
                formatRule.put("worksheet_id", "0#"); 
                formatRule.put("range", "A" + (i + 2) + ":H" + (i + 2)); 
                formatRule.put("fill_color", "#FF0000"); 
                formatRule.put("font_color", "#FFFFFF"); 
                formatRule.put("bold", true); 
               
                formatJsonArray.put(formatRule);
                setCellNote(rowIndex, 1, "Percentage is below 90%");
            }
        }

      
        JSONObject generalFormatting = new JSONObject();
        generalFormatting.put("worksheet_id", "0#"); 
        generalFormatting.put("range", "A1:H100"); 
        generalFormatting.put("horizontal_alignment", "center"); 
        generalFormatting.put("font_name", "Times New Roman"); 
        generalFormatting.put("font_size", 10); 
        generalFormatting.put("bold", true);

        formatJsonArray.put(generalFormatting);

        StringBuilder formatData = new StringBuilder();
        formatData.append("method=").append("ranges.format.set").append("&");
        formatData.append("format_json=").append(URLEncoder.encode(formatJsonArray.toString(), StandardCharsets.UTF_8));

        System.out.println("Format Data: " + formatData.toString());

        HttpRequest formatRequest = HttpRequest.newBuilder()
                .uri(new URI(SHEET_URL))
                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(formatData.toString()))
                .build();

        HttpResponse<String> formatResponse = client.send(formatRequest, HttpResponse.BodyHandlers.ofString());

        System.out.println("Format Response Code :: " + formatResponse.statusCode());
        System.out.println("Format Response Body: " + formatResponse.body());

        if (formatResponse.statusCode() == 200) {
            System.out.println("Successfully applied conditional formatting.");
        } else {
            System.out.println("Applying conditional formatting failed.");
        }
    }
    private static void setCellNote(int rowIndex, int columnIndex, String note) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        String requestData = "method=" + URLEncoder.encode("cell.note.set", StandardCharsets.UTF_8) + "&"
                + "worksheet_name=" + URLEncoder.encode("Sheet1", StandardCharsets.UTF_8) + "&"
                + "row=" + URLEncoder.encode(String.valueOf(rowIndex), StandardCharsets.UTF_8) + "&"
                + "column=" + URLEncoder.encode(String.valueOf(columnIndex), StandardCharsets.UTF_8) + "&"
                + "note=" + URLEncoder.encode(note, StandardCharsets.UTF_8);

        System.out.println("Set Cell Note Data: " + requestData);

        HttpRequest noteRequest = HttpRequest.newBuilder()
                .uri(new URI(SHEET_URL))
                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(requestData))
                .build();

        HttpResponse<String> noteResponse = client.send(noteRequest, HttpResponse.BodyHandlers.ofString());

        System.out.println("Set Cell Note Response Code :: " + noteResponse.statusCode());
        System.out.println("Set Cell Note Response Body: " + noteResponse.body());

        if (noteResponse.statusCode() == 200) {
            System.out.println("Successfully set cell note.");
        } else {
            System.out.println("Setting cell note failed.");
        }
    }

    private static void setColumnWidths() throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        
        JSONArray columnRangeArray = new JSONArray();
        
        
        JSONObject columnRange = new JSONObject();
        columnRange.put("start_column", 1); 
        columnRange.put("end_column", 15);  
        columnRangeArray.put(columnRange);

        
        String columnRangeJson = columnRangeArray.toString();
        String encodedColumnRangeJson = URLEncoder.encode(columnRangeJson, StandardCharsets.UTF_8);

        
        String requestData = "method=worksheet.columns.width&"
                + "worksheet_name=Sheet1&"
                + "column_index_array=" + encodedColumnRangeJson + "&"
                + "auto_fit=true";  // Enable auto-fit for specified columns

        System.out.println("Column Width Data: " + requestData);

        HttpRequest columnWidthRequest = HttpRequest.newBuilder()
                .uri(new URI(SHEET_URL))
                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(requestData))
                .build();

        HttpResponse<String> columnWidthResponse = client.send(columnWidthRequest, HttpResponse.BodyHandlers.ofString());

        System.out.println("Column Width Response Code :: " + columnWidthResponse.statusCode());
        System.out.println("Column Width Response Body: " + columnWidthResponse.body());

        if (columnWidthResponse.statusCode() == 200) {
            System.out.println("Successfully set column widths with auto-fit.");
        } else {
            System.out.println("Setting column widths with auto-fit failed.");
        }
    }
//    private static void updateSpecificColumns(JSONArray jsonArray) throws Exception {
//        HttpClient client = HttpClient.newHttpClient();
//
//        // Construct the data to update specific columns
//        String postData = buildUpdatePostData(jsonArray);
//        HttpRequest updateRequest = HttpRequest.newBuilder()
//                .uri(new URI(SHEET_URL))
//                .header("Authorization", "Zoho-oauthtoken " + OAUTH_TOKEN)
//                .header("Content-Type", "application/x-www-form-urlencoded")
//                .POST(HttpRequest.BodyPublishers.ofString(postData))
//                .build();
//
//        HttpResponse<String> updateResponse = client.send(updateRequest, HttpResponse.BodyHandlers.ofString());
//        System.out.println("Update Response Code :: " + updateResponse.statusCode());
//        System.out.println("Update Response Body: " + updateResponse.body());
//
//        if (updateResponse.statusCode() != 200) {
//            throw new Exception("Updating records failed.");
//        }
//    }

//    private static String buildUpdatePostData(JSONArray jsonArray) {
//        StringBuilder postData = new StringBuilder();
//        postData.append("method=").append("worksheet.records.add").append("&");
//        postData.append("worksheet_name=").append("Sheet1").append("&");
//        postData.append("header_row=").append("1").append("&");
//        postData.append("json_data=").append(URLEncoder.encode(jsonArray.toString(), StandardCharsets.UTF_8));
//
//        System.out.println("Update Post Data: " + postData.toString());
//        return postData.toString();
//    }


    private static String buildPostData(JSONArray jsonArray) {
        StringBuilder postData = new StringBuilder();
        postData.append("method=").append("worksheet.records.add").append("&");
        postData.append("worksheet_name=").append("Sheet1").append("&");
        postData.append("header_row=").append("1").append("&");
        postData.append("json_data=").append(URLEncoder.encode(jsonArray.toString(), StandardCharsets.UTF_8));

        System.out.println("Post Data: " + postData.toString());
        return postData.toString();
    }

    private static String buildPostFormulaData() {
    	StringBuilder post = new StringBuilder();
        post.append("method=").append(URLEncoder.encode("row.content.set", StandardCharsets.UTF_8)).append("&");
        post.append("worksheet_name=").append(URLEncoder.encode("Sheet1", StandardCharsets.UTF_8)).append("&");
        post.append("row=").append(URLEncoder.encode("2", StandardCharsets.UTF_8)).append("&");
        post.append("column_array=").append(URLEncoder.encode("[6]", StandardCharsets.UTF_8)).append("&"); // Assuming column C for result

        post.append("data_array=").append(URLEncoder.encode("[\"=IF(D2=0, 0, ROUND(((D2:D4-E2:E4)/D2:D4)*100))\"]", StandardCharsets.UTF_8));

        System.out.println("Post Data: " + post.toString());
        System.out.println("Post Data for Percentage Calculation: " + post.toString());
        return post.toString();
    }
}
